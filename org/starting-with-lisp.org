#+title: Lisp as a first programming language


* Benefits of starting with Lisps for new coders
  Lisp languages (such as Scheme, Racket, Clojure, or Emacs Lisp) can offer unique perspectives and benefits compared to more conventional choices like Python or JavaScript.

** Advantages:
Deep Understanding of Programming Concepts:
- Lisp-family languages often prioritize fundamental programming concepts. They are often used in academic settings.

Metaprogramming and Code-as-Data (Homoiconicity):
- Allows for powerful metaprogramming capabilities, expanding one's view of programming.

Recursive Thinking:
- Lisp encourages a recursive style of problem-solving.

Functional Programming:
- Provides a strong foundation in functional programming concepts.

Immutability and Concurrency:
- Some modern Lisp dialects, like Clojure, prioritize these concepts.

Customizability and Extensibility:
- Learning Elisp allows one to deeply customize and extend their Emacs environment.

Minimalist Syntax:
- Lisps have a very minimal and consistent syntax.

Interactivity and REPL:
- Many Lisp environments support interactive development with a REPL.

Cultural Exposure:
- Exposure to the rich history and unique culture of the Lisp community.


** Challenges:
Less Mainstream:
- Fewer job opportunities compared to languages like Python or JavaScript.

Learning Curve:
- Unique syntax and idioms might pose an initial challenge.

Resources:
- Fewer learning materials compared to Python and JavaScript.


** Conclusion:
Regardless of the starting language, the key is to understand the underlying principles and concepts of programming. Each language has its strengths and will shape one's thinking in unique ways. Starting with Lisp can be a rewarding journey.
