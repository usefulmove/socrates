#+title: Functional Programming

```org
* Common Functions

|---------------------------+------------------------------------------------------+------------------------------------------------------+---------------------+-------------------------------+--------------------------------------|
| Operation                 | Scala                                                | Python                                               | JavaScript          | RamdaJS                       | Rust                                 |
|---------------------------+------------------------------------------------------+------------------------------------------------------+---------------------+-------------------------------+--------------------------------------|
| map                       | map                                                  | map ( f(a) for a in iter )                           | map                 | R.map                         | iter.map                             |
| filter                    | filter                                               | filter ( a for a in iter if predicate(a) )           | filter              | R.filter                      | iter.filter                          |
| fold                      | foldLeft / reduce                                    | functools.reduce                                     | reduce              | R.reduce                      | iter.fold / iter.reduce              |
| flatmap                   | collect / flatMap                                    | -                                                    | flatMap             | R.chain                       | iter.flat_map                        |
| flatten                   | flatten                                              | ( a for subseq in seq for a in subseq )              | flat()              | R.flatten                     | iter.flatten                         |
| curry                     |                                                      | toolz.curry                                          | -                   | R.curry                       |                                      |
| scan                      | scanLeft                                             | itertools.accumulate                                 | -                   | R.scan                        | iter.scan                            |
| sum                       | sum                                                  | sum                                                  | reduce              | R.sum                         | iter.sum                             |
| count                     | size/count                                           | len                                                  | length              | R.count                       | iter.count/len                       |
| max                       | max                                                  | max                                                  | reduce              | R.max                         | iter.max                             |
| min                       | min                                                  | min                                                  | reduce              | R.min                         | iter.min                             |
| sort                      | sorted                                               | sorted                                               | sort((a,b) => a-b)* | R.sort                        | slice::sort*                         |
| reverse                   | reverse                                              | ::-1 / reversed                                      | reverse*            | R.reverse                     | iter.rev                             |
| compose                   |                                                      | toolz.compose/toolz.compose_left as pipe             | -                   | R.compose/R.pipe              |                                      |
| drop                      | drop                                                 | ::-1                                                 | slice               | R.drop                        | skip                                 |
| take                      | take                                                 | ::1                                                  | slice               | R.take                        | take                                 |
| any                       | exists                                               | any                                                  | some()              | R.any                         | iter.any                             |
| all                       | forall                                               | all                                                  | every()             | R.all                         | iter.all                             |
| zip/inner product         | zip                                                  | zip                                                  |                     | R.zip                         | iter.zip                             |
| outer product (Cartesian) |                                                      | itertools.product ( (a, b) for a in as for b in bs ) |                     | -                             | itertools::iproduct                  |
| chain                     | ++                                                   | itertools.chain                                      | concat              | R.concat                      | iter.chain                           |
| rotate                    | (o takeRight 1) ::: (o dropRight 1)/o.tail :+ o.head | o[n:] + o[:n] / o[-n:] + o[:-n] / numpy.roll         |                     | R.move(-1)(0) / R.move(0)(-1) | slice.rotate_right/slice.rotate_left |
| unique                    | distinct                                             | set(seq)                                             | -                   | R.uniq                        | dedup                                |
|---------------------------+------------------------------------------------------+------------------------------------------------------+---------------------+-------------------------------+--------------------------------------|
```

[[https://kerkour.com/rust-functional-programming]["Idiomatic Rust favors functional programming. It's a better fit for its ownership model."]] - Sylvain Kerkour


* Concepts ([[https://www.baeldung.com/scala/functional-programming][reference]])
- Immutability
- Recursion ( Tail Recursion )
- Functions as first-class objects
- Pure Functions
- Function Composition ( Category Theory )
- Higher-Order Functions
- Anonymous Functions
- Closures
- Partial Functions
- Monads
- Currying


* Languages
** Rust
*** Iterators in Rust

[[https://doc.rust-lang.org/std/iter/trait.Iterator.html][Iterator in std::iter]]

iter (by reference)
into_iter (owned)

`Iter.inspect` can be used to inspect values flowing through an iterator.


** Scala
*** Tail Recursion

`import scala.annotation.tailrec`

`@tailrec` decorator before recursive function definition


** Python
*** Caching
`from functools import cache`

`@cache` decorator before function definition
