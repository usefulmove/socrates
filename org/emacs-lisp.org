#+title: Emacs Lisp


#+begin_src emacs-lisp
(load-file "~/repos/cora/src/cora.el") ; load Cora library
#+end_src

* Lesson One
If you think to use a `progn` binding (`begin` in Racket Scheme), instead use a `let` binding (esp. if defining a local variable binding would be helpful for clarity). The holy grail.

#+begin_src emacs-lisp
(progn
  (blink-cursor-mode 0)
  (setq evil-normal-state-cursor '(box "#00c0ff")))

(let ()
  (blink-cursor-mode 1)
  (setq evil-normal-state-cursor '(box "#fff670")))

;; forms
(let ()
  (sexp)
  (sexp))

(let ((a (sexp))
      (b (sexp)))
  (sexp)
  (sexp))
#+end_src


A `let` binding evaluates each of its (S-expression) arguments after binding a series of of symbol definitions. The "empty let" contains no bindings and simply evaluates each of its arguments the way `begin` does in Scheme.

#+begin_src racket
(define (begin . args)
  (cond ((null? args) #<void>) ; return a void value for an empty begin.
        ((null? (cdr args)) (car args)) ; if last expression, return its value.
        (else (car args) ; evaluate the first expression for its side-effects.
              (apply begin (cdr args))))) ; recursively evaluate the rest.
#+end_src


** Define the relationship between `let` `lambda` and `begin` in Scheme?

#+begin_src emacs-lisp
;; begin is a let with no bindings.
(begin
  (sexp)
  (sexp))

(let ()
  (sexp)
  (sexp))

(lambda ()
  (sexp)
  (sexp))


;; a let is an immediately-invoked (lambda) function expression (iife).
(let ((a (sexp-a))
      (b (sexp-b)))
  (sexp)
  (sexp))

((lambda (a b)
  (sexp)
  (sexp))
 (sexp-a)
 (sexp-b))
#+end_src

#+begin_src racket
(let ((a 2)
      (b 8))
  (* a b))

((lambda (a b) (* a b)) ; self-evaluating lambda form.
   2 8)
#+end_src


#+begin_src racket
(begin
  (sexp)
  (sexp))

((lambda () ; self-evaluating lambda form
  (sexp)
  (sexp)))

(let ()
  (sexp)
  (sexp))


;; let is an immediately-invoked lambda function expression (iife).
(let ((a (sexp-a))
      (b (sexp-b)))
  (sexp)
  (sexp))

((lambda (a b)
  (sexp)
  (sexp))
 (sexp-a)
 (sexp-b))
#+end_src

The let expression is preferred over the iife lambda expression for expressiveness and readability, but there are times when the opposite is true.

#+begin_src emacs-lisp
(defun test-enc-round-trip (error-prelude)
  ((lambda (f s)
     (when (not (equal s (funcall f s)))
       (error (concat
                error-prelude
                "error: round-trip encryption test(s) failed"))))

   (lambda (s) ; lambda :: string -> string
     (let ((key 313))
       (join-chars (enc-encrypt-chars (- key) (enc-encrypt-chars key (string-to-list s))))))

   "lorem ipsum dolor sit amet, consectetur adipiscing elit"))

; vs

(defun test-enc-round-trip (error-prelude)
  (let ((f (lambda (s)
            (let ((key 313))
              (join-chars (enc-encrypt-chars (- key) (enc-encrypt-chars key (string-to-list s)))))))
        (s "lorem ipsum dolor sit amet, consectetur adipiscing elit"))
    (when (not (equal s (funcall f s)))
      (error (concat
               error-prelude
               "error: round-trip encryption test(s) failed")))))
#+end_src


( Lisps help me "see" in code (forms). )


#+begin_src emacs-lisp
(define begin (sexps)
  (mapcar 'eval sexps))
#+end_src



* Lesson Two

In general, prefer the the more general `cond` form to the narrower `if`, unless clarity is clearly better.

#+begin_src racket
(define (begin . args)
  (if (null? args)
      #<void> ; return a void value for an empty begin.
      (if (null? (cdr args))
          (car args) ; if last expression, return its value.
          (begin
            (car args) ; evaluate the first expression for its side-effects.
            (apply begin (cdr args)))))) ; recursively evaluate the rest.

(define (begin . args)
  (cond ((null? args) #<void>) ; return a void value for an empty begin.
        ((null? (cdr args)) (car args)) ; if last expression, return its value.
        (else (car args) ; evaluate the first expression for its side-effects.
              (apply begin (cdr args))))) ; recursively evaluate the rest.
#+end_src



* Lesson Three

Ponder the two choices below, let versus self-evaluating lambda. The self-executing lambda form is more obviously (and aesthetically) a functional programming form. It's elegant, if pedantic.

#+begin_src emacs-lisp
((lambda (base cap)
   (cond ((or (< ord base)
              (> ord (- cap 1))) ord) ; only modify characters in range
         (t (+ base (mod (+ (- ord base) encryption-key)
                         (- cap base))))))
 32 127)

; vs

(let* ((base 32)
       (cap 127)
       (range (- cap base)))
  (cond ((or (< ord base)
             (> ord (- cap 1))) ord) ; only modify characters in range
        (t (+ base (mod (+ (- ord base) encryption-key)
                        range)))))
#+end_src



* Lesson Four

ascii conversion

#+begin_src emacs-lisp
;; character(s) to string
(string ?a) ; => "a"
(string ?0 ?3 ?1 ?2) ; => "0312"

;; string to characers
(string-to-list "0312") => ; (48 51 49 50)

;; characters are integers
(= ?c 99)
#+end_src



* Lesson Five

Guards

#+begin_src python
def f()
  if condition: return

  otherstuff
#+end_src

#+begin_src emacs-lisp
(lambda ()
  (if condition ()
      otherstuff))
#+end_src



* Lesson Six

Macros

#+begin_src emacs-lisp
(defmacro for-comp (sym lst exp)
  (list 'mapcar (list 'lambda (list sym) exp) lst))
;(mapcar (lambda (a) (* a a)) '(3 1 2))

(defmacro for-comp (sym lst exp) ; using quasi-quotes
  `(mapcar (lambda (,sym) ,exp) ,lst))

; prototype ("for comprehension")
(for-comp a '(3 1 2) (* a a)) ; => (9 1 4)
#+end_src

#+begin_src emacs-lisp
(defmacro _l (sym exp)
  `(lambda ,sym ,exp))

; prototype
(mapcar (_l (a) (* a a a)) '(3 1 2))
#+end_src



* Lesson Seven
An "invalid function" error in Emacs Lisp (if you are coming from other Lisps) often means you haven't used `funcall` (which is unnecessary in many Lisp dialects).



* Lesson Eight

Recursive Anonymous Functions

#+begin_src emacs-lisp
(letrec ((fib (lambda (n)
                (cond ((< n 2) n)
                      (t (+ (funcall fib (- n 1))
                            (funcall fib (- n 2))))))))
  (funcall fib 38)) ; 39088169
#+end_src



* Lesson Nine

Optional Function Arguments

#+begin_src emacs-lisp
(defun test (&rest args)
  (+ (car args)
     (cadr args)
     (if (= 2 (length args))
         10
         (caddr args))))

(defun test (a b &optional c)
  (unless c (setq c 10))
  (+ a b c))

(test 1 2 3) ; => 6
(test 1 2) ; => 13
#+end_src



* Lesson Ten

Hash tables

#+begin_src emacs-lisp
; create empty hash table
(setq hash (make-hash-table :test 'equal))

; add key-value pairs
(puthash 'a 2 hash)
(puthash 'b 8 hash)
(puthash '2 20 hash)

; retrieve value
(gethash 'a hash) ; => 2
(gethash 2 hash) ; => 20
#+end_src



* Lesson Eleven

Structs

#+begin_src emacs-lisp
(require 'cl-lib)

(cl-defstruct person
  age
  male?
  height
  weight)

(setq bob (make-person
            :age 30
            :male? t
            :height 58
            :weight 205))

(person-weight bob)
#+end_src

#+RESULTS:
: 205



* Lesson Twelve

Sorting

#+begin_src emacs-lisp
(setq lst '(3 1 2 0 5 4))
(sort (copy-sequence lst) '<=) ; (0 1 2 3 4 5)
#+end_src

#+begin_src emacs-lisp
(setq counts-hash (tally '(3 1 2 5 4 8 3 1 5 5)))

(setq counts (let ((out '()))
               (maphash
                 (lambda (key value)
                   (setq out (cons (cons key value) out)))
                 counts-hash)
               out)) ; ((8 . 1) (4 . 1) (5 . 3) (2 . 1) (1 . 2) (3 . 2))

(sort
  (copy-sequence counts)
  (lambda (pair1 pair2)
    (> (cdr pair1)
       (cdr pair2)))) ; ((5 . 3) (1 . 2) (3 . 2) (8 . 1) (4 . 1) (2 . 1))
#+end_src



* Lesson Thirteen

Threading Macro for Function Composition

#+begin_src emacs-lisp
(thread 5
  'sqrt
  (_ (- % 1))
  (_ (/ % 2))) ; 0.6180339887498949
#+end_src



* Lesson Fourteen

Closures and Lexical Scoping

#+begin_src emacs-lisp
(setq lexical-binding t)
(load-file "~/repos/cora/src/cora.el")


(defun make-counter (start)
  (let ((count start)) ; lisp closures are beautiful
    (lambda ()
      (setq count (inc count))
      count)))


(fset 'cntr (make-counter 0))

(cntr) ; 1
(cntr) ; 2
(cntr) ; 3

(fset'cntr2 (make-counter 200))

(cntr2) ; 201
(cntr2) ; 202
(cntr) ; 4
(cntr2) ; 203
#+end_src
